using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace LORModingBase.DLLEditor
{
    /// <summary>
    /// AutoGenerateDLLWindow.xaml에 대한 상호 작용 논리
    /// </summary>
    public partial class AutoGenerateDLLWindow : Window
    {
        List<AutoGenerateCodeBlock> autoGenCodeBlockSearchResults = new List<AutoGenerateCodeBlock>();
        AutoGenerateCodeBlock selectedAutoGenerateCodeBlock = null;

        #region Init controls
        public AutoGenerateDLLWindow()
        {
            InitializeComponent();
            Tools.WindowControls.LocalizeWindowControls(this, DM.LANGUAGE_FILE_NAME.GLOBAL_WINDOW);
            InitLbxSearchType(new List<string>());
        }

        private void InitLbxSearchType(List<string> searchTypes)
        {
            LbxSearchType.Items.Clear();
            LbxSearchType.Items.Add(DM.LocalizeCore.GetLanguageData(DM.LANGUAGE_FILE_NAME.GLOBAL_WINDOW, $"SEARCH_NO_FILTER"));
            searchTypes.ForEach((string searchType) =>
            {
                LbxSearchType.Items.Add(searchType);
            });

            if (LbxSearchType.Items.Count > 0)
            {
                LbxSearchType.SelectedIndex = 0;
                InitSearchItems();
            }
        }

        private void InitSearchItems()
        {
            HideAllDataGrids();
            selectedAutoGenerateCodeBlock = null;
            if (LbxSearchType.SelectedItem != null)
            {
                LbxSourceCodeBlocks.Items.Clear();
                autoGenCodeBlockSearchResults.Clear();
                foreach (AutoGenerateCodeBlock codeBlock in AutoGenerateCodeBlockDataManagement.loadedAutoGenCodeBlocks)
                {
                    string SEARCH_STR = $"{codeBlock.title.ToLower()}{codeBlock.description.ToLower()}";
                    if (!string.IsNullOrEmpty(TbxSearch.Text) && !SEARCH_STR.Replace(" ", "").Contains(TbxSearch.Text.ToLower().Replace(" ", ""))) continue;
                    if (LbxSearchType.SelectedIndex == 0)
                    {
                        LbxSourceCodeBlocks.Items.Add($"{codeBlock.title} - {codeBlock.description}");
                        autoGenCodeBlockSearchResults.Add(codeBlock);
                    }
                    else
                    {
                        switch (LbxSearchType.SelectedItem.ToString())
                        {
                            default:
                                if (SEARCH_STR.Contains(LbxSearchType.SelectedItem.ToString().ToLower()))
                                {
                                    LbxSourceCodeBlocks.Items.Add($"{codeBlock.title} - {codeBlock.description}");
                                    autoGenCodeBlockSearchResults.Add(codeBlock);
                                }
                                break;
                        }
                    }
                }
                if (LbxSourceCodeBlocks.Items.Count > 0)
                    LbxSourceCodeBlocks.SelectedIndex = 0;
            }
        }
        #endregion

        #region Search help methodes
        private void LbxSearchType_SelectionChanged(object sender, System.Windows.Controls.SelectionChangedEventArgs e)
        {
            InitSearchItems();
        }

        private void TbxSearch_TextChanged(object sender, System.Windows.Controls.TextChangedEventArgs e)
        {
            InitSearchItems();
        }
        #endregion

        private void LbxSourceCodeBlocks_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            if (LbxSourceCodeBlocks.SelectedIndex != -1)
            {
                selectedAutoGenerateCodeBlock = autoGenCodeBlockSearchResults[LbxSourceCodeBlocks.SelectedIndex];
                ReflectDataInputUIs();
            }
        }

        private void HideAllDataGrids()
        {
            GrdData_0.Visibility = Visibility.Collapsed;
            GrdData_1.Visibility = Visibility.Collapsed;
            GrdData_2.Visibility = Visibility.Collapsed;
            GrdData_3.Visibility = Visibility.Collapsed;
            GrdData_4.Visibility = Visibility.Collapsed;
            GrdData_5.Visibility = Visibility.Collapsed;
            GrdData_6.Visibility = Visibility.Collapsed;
            GrdData_7.Visibility = Visibility.Collapsed;
            GrdData_8.Visibility = Visibility.Collapsed;
            GrdData_9.Visibility = Visibility.Collapsed;
        }

        private void ReflectDataInputUIs()
        {
            HideAllDataGrids();
            if(selectedAutoGenerateCodeBlock != null)
            {
                for(int paraIndex=0; paraIndex<selectedAutoGenerateCodeBlock.parameterNameList.Count; paraIndex++)
                {
                    if (selectedAutoGenerateCodeBlock.parameterNameList[paraIndex].Contains('@'))
                    {
                        string DEFALT_DEFINE = selectedAutoGenerateCodeBlock.parameterNameList[paraIndex].Split('@').Last();
                        string defaultValue = "";
                        switch (DEFALT_DEFINE)
                        {
                            case "NAME_SPACE":
                                defaultValue = DM.Config.config.nameSpaceToUse;
                                break;
                            case "MAMONY_ID":
                                defaultValue = "LOR.Moding.Base";
                                break;
                            case "MODE_NAME":
                                defaultValue = DM.Config.CurrentWorkingDirectory.Split('\\').Last();
                                break;
                        }
                        InputValueToDataUI(paraIndex, selectedAutoGenerateCodeBlock.parameterNameList[paraIndex], defaultValue);
                    }
                    else
                        InputValueToDataUI(paraIndex, selectedAutoGenerateCodeBlock.parameterNameList[paraIndex], "");
                }
            }
        }

        private void InputValueToDataUI(int index, string labelValue, string tbxDefaultValue="")
        {
            switch (index)
            {
                case 0:
                    GrdData_0.Visibility = Visibility.Visible;
                    LblData_0.Content = labelValue.Split('@')[0];
                    LblData_0.ToolTip = labelValue.Split('@')[0];
                    TbxData_0.Text = tbxDefaultValue;
                    TbxData_0.ToolTip = tbxDefaultValue;
                    TbxData_0.Tag = labelValue;
                    break;
                case 1:
                    GrdData_1.Visibility = Visibility.Visible;
                    LblData_1.Content = labelValue.Split('@')[0]; ;
                    LblData_1.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_1.Text = tbxDefaultValue;
                    TbxData_1.ToolTip = tbxDefaultValue;
                    TbxData_1.Tag = labelValue;
                    break;
                case 2:
                    GrdData_2.Visibility = Visibility.Visible;
                    LblData_2.Content = labelValue.Split('@')[0]; ;
                    LblData_2.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_2.Text = tbxDefaultValue;
                    TbxData_2.ToolTip = tbxDefaultValue;
                    TbxData_2.Tag = labelValue;
                    break;
                case 3:
                    GrdData_3.Visibility = Visibility.Visible;
                    LblData_3.Content = labelValue.Split('@')[0]; ;
                    LblData_3.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_3.Text = tbxDefaultValue;
                    TbxData_3.ToolTip = tbxDefaultValue;
                    TbxData_3.Tag = labelValue;
                    break;
                case 4:
                    GrdData_4.Visibility = Visibility.Visible;
                    LblData_4.Content = labelValue.Split('@')[0]; ;
                    LblData_4.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_4.Text = tbxDefaultValue;
                    TbxData_4.ToolTip = tbxDefaultValue;
                    TbxData_4.Tag = labelValue;
                    break;

                case 5:
                    GrdData_5.Visibility = Visibility.Visible;
                    LblData_5.Content = labelValue.Split('@')[0]; ;
                    LblData_5.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_5.Text = tbxDefaultValue;
                    TbxData_5.ToolTip = tbxDefaultValue;
                    TbxData_5.Tag = labelValue;
                    break;
                case 6:
                    GrdData_6.Visibility = Visibility.Visible;
                    LblData_6.Content = labelValue.Split('@')[0]; ;
                    LblData_6.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_6.Text = tbxDefaultValue;
                    TbxData_6.ToolTip = tbxDefaultValue;
                    TbxData_6.Tag = labelValue;
                    break;
                case 7:
                    GrdData_7.Visibility = Visibility.Visible;
                    LblData_7.Content = labelValue.Split('@')[0]; ;
                    LblData_7.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_7.Text = tbxDefaultValue;
                    TbxData_7.ToolTip = tbxDefaultValue;
                    TbxData_7.Tag = labelValue;
                    break;
                case 8:
                    GrdData_8.Visibility = Visibility.Visible;
                    LblData_8.Content = labelValue.Split('@')[0]; ;
                    LblData_8.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_8.Text = tbxDefaultValue;
                    TbxData_8.ToolTip = tbxDefaultValue;
                    TbxData_8.Tag = labelValue;
                    break;
                case 9:
                    GrdData_9.Visibility = Visibility.Visible;
                    LblData_9.Content = labelValue.Split('@')[0]; ;
                    LblData_9.ToolTip = labelValue.Split('@')[0]; ;
                    TbxData_9.Text = tbxDefaultValue;
                    TbxData_9.ToolTip = tbxDefaultValue;
                    TbxData_9.Tag = labelValue;
                    break;
            }
        }


        /// <summary>
        /// Mouse left button select -> Show selector
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void ReflectSelections(object sender, MouseButtonEventArgs e)
        {
            if (selectedAutoGenerateCodeBlock == null)
                return;
            TextBox tbx = sender as TextBox;
            if (tbx.Tag.ToString().Contains('@'))
            {
                if (tbx.Tag.ToString().Split('@').Count() > 1)
                {
                    string SELECTION_SHOW_DEF = tbx.Tag.ToString().Split('@')[1];
                    switch (SELECTION_SHOW_DEF)
                    {
                        case "BUFF_NAME":
                            new SubWindows.Global_InputInfoWithSearchWindow((string selectedID) =>
                            {
                                tbx.Text = selectedID;
                                tbx.ToolTip = selectedID;
                            }, SubWindows.DLL_EDITOR_SELECT_PRESET.CUSTOM_BUFF).ShowDialog();
                            break;
                        case "IMAGE_FILE_NAME":
                            new SubWindows.Global_InputInfoWithSearchWindow((string selectedID) =>
                            {
                                tbx.Text = selectedID.Split(']').Last().Trim();
                                tbx.ToolTip = selectedID.Split(']').Last().Trim();
                            }, SubWindows.DLL_EDITOR_SELECT_PRESET.CUSTOM_IMAGE).ShowDialog();
                            break;
                    }
                }
            }
        }

        /// <summary>
        /// Mouse right button select -> Handly input
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void HandlyInputToTextBox(object sender, MouseButtonEventArgs e)
        {
            if (e.RightButton == MouseButtonState.Pressed)
            {
                if (selectedAutoGenerateCodeBlock == null)
                    return;
                TextBox tbx = sender as TextBox;

                new SubWindows.Global_InputOneColumnData((string inputedData) =>
                {
                    tbx.Text = inputedData;
                }, tbx.Text).ShowDialog();
            }
        }

        private void BtnMakeDLLAuto_Click(object sender, RoutedEventArgs e)
        {
            for(int paraIndex=0; paraIndex<selectedAutoGenerateCodeBlock.parameterNameList.Count; paraIndex++)
            {
                #region Data empty check
                switch (paraIndex)
                {
                    case 0:
                        if (string.IsNullOrEmpty(TbxData_0.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_0.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 1:
                        if (string.IsNullOrEmpty(TbxData_1.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_1.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 2:
                        if (string.IsNullOrEmpty(TbxData_2.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_2.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 3:
                        if (string.IsNullOrEmpty(TbxData_3.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_3.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 4:
                        if (string.IsNullOrEmpty(TbxData_4.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_4.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;

                    case 5:
                        if (string.IsNullOrEmpty(TbxData_5.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_5.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 6:
                        if (string.IsNullOrEmpty(TbxData_6.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_6.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 7:
                        if (string.IsNullOrEmpty(TbxData_7.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_7.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 8:
                        if (string.IsNullOrEmpty(TbxData_8.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_8.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                    case 9:
                        if (string.IsNullOrEmpty(TbxData_9.Text))
                        {
                            Tools.MessageBoxTools.ShowErrorMessageBox($"{LblData_9.Content} 항목이 입력되지 않았습니다.");
                            return;
                        }
                        break;
                } 
                #endregion
            }

            if (string.IsNullOrEmpty(TbxDLLName.Text))
            {
                Tools.MessageBoxTools.ShowErrorMessageBox($"DLL 이름이 입력되지 않았습니다");
                return;
            }
            string OUTPUT_DLL_PATH = $"{DM.Config.CurrentWorkingDirectory}\\{TbxDLLName}.dll";
            if(File.Exists(OUTPUT_DLL_PATH))
            {
                if (MessageBox.Show("해당 이름의 DLL이 이미 존재하며, 계속 진행하면 덮어쓰기가 됩니다. 진행하시겠습니까?", "덮어쓰기 경고", MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.No)
                    return;
            }

            string GENERATED_CODE = selectedAutoGenerateCodeBlock.codes;
            for (int paraIndex = 0; paraIndex < selectedAutoGenerateCodeBlock.parameterNameList.Count; paraIndex++)
            {
                #region Replace code
                switch (paraIndex)
                {
                    case 0:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{0}}", TbxData_0.Text);
                        break;
                    case 1:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{1}}", TbxData_1.Text);
                        break;
                    case 2:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{2}}", TbxData_2.Text);
                        break;
                    case 3:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{3}}", TbxData_3.Text);
                        break;
                    case 4:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{4}}", TbxData_4.Text);
                        break;

                    case 5:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{5}}", TbxData_5.Text);
                        break;
                    case 6:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{6}}", TbxData_6.Text);
                        break;
                    case 7:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{7}}", TbxData_7.Text);
                        break;
                    case 8:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{8}}", TbxData_8.Text);
                        break;
                    case 9:
                        GENERATED_CODE = GENERATED_CODE.Replace("{{9}}", TbxData_9.Text);
                        break;
                }
                #endregion
            }

            TbxCompileResult.Text = CompileDLL.CompileGivenCodeToDLL(GENERATED_CODE, TbxDLLName.Text);
            TbxCompileResult.ScrollToEnd();
        }
    }
}
