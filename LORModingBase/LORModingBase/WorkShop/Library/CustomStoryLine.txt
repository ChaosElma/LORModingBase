using (System.IO.StreamWriter sw = System.IO.File.AppendText(UnityEngine.Application.dataPath + "/BaseMods/storyline_Log.txt"))
{
    sw.WriteLine("TEST");
}
UISoundManager.instance.PlayEffectSound(UISoundType.Ui_Click);


UISpriteDataManager-GtStoryIcon - 스토리 아이콘을 얻는 객체
UIStoryProgressIconSlot uistoryProgressIconSlot3 = UnityEngine.Object.Instantiate<UIStoryProgressIconSlot>(uistoryProgressIconSlot, uistoryProgressIconSlot.transform.parent);
UIStoryProgressIconSlot - 스토리 선택부분 패널로 보인다
UIStoryProgressPanel_OnUpdatePhase - 스토리 진행관련 패널로 보인다


UIStoryProgressPanel - 스토리 진행 UI의 핵심 부분
    MoveIconTarget(-UIStoryProgressIconSlot) - 스토리 라인 화면에서 아이콘을 누를경우 그곳으로 이동하게되는 부분을 구현해놓음
    iconList - 스토리와 관련된 버튼 아이콘들이 저장되어 있다 (완전 복사가 가능)
    OpenInit() * - 열면 초기화가 되는 것으로 보인다
    SetStoryLine() - iconList에 있는 내용으로 UI를 그리고 있다 선을 그려서 위치를 지정하는 것 같다

    chapterIconList - 챕터의 아이콘이 들어있다 SetStoryLine에서 관련내용을 초기화시킨다
    iconList - 스토리와 관련된 버튼 아이콘들이 저장되어 있다

    OnPointerClickLevelIcon - 레벨 이미지가 들어있음 레벨 아이콘을 클릭했을 경우다
    openFrameTarget - 클릭해서 열었을때 배경 부분

    StoryLineData - 특정 스토리가 어느 라인에 속하는지에 대한 정보
        이게 없으면 표시가 안된다
StoryTotal.instance._lineList의 데이터와 iconList의 데이터의 storyType이 일치해야 표시가된다


UIStoryProgressIconSlot - 스토리 라인 블럭
    this.SetIcon(UISpriteDataManager.instance.GetStoryIcon(data[0].storyType));
    실제 아이콘을 설정하는 부분

    SetSlotData(List<StageClassInfo> data) - 깨지 않았으면 물음표 아이콘, 깨면 스토리 아이콘이 나오는 부분이다
        GetStoryIcon(...)에 StoryType이 들어가는데 여기를 패치하면 커스텀 아이콘까지는 가능하다


UIInvitationStoryFilterPanel - 챕터진행에 따른 스토리 표시여부를 확인

--
Stage xml 정보는 StoryLine 객체에 전혀 반영되지 않는다
Singleton<StageClassInfoList>.Instance.recipeCondList;에서 스토리 라인 객체를 가져온다
이것은 StaticDataLoader/LoadStage에서 데이터를 가져온다
# StageClassInfoList는 커스텀 스테이지를 완전하게 가져올 수 있다
[1] 거름망 1 StoryType이 Combine="BookRecipe"인가? -> StoryTotal/SetData 최상단까지 끌어와짐
[2] 하드코딩된 UIStoryLine이라는 열거형 자료형이 라인에 포함되고, 이것과 일치해야 StageList에서 가져와진다
using (System.IO.StreamWriter sw = System.IO.File.AppendText(Application.dataPath + "/BaseMods/innerStageLog.txt"))
{
    sw.WriteLine($"{iconList[i].currentStory}");
}
foreach (StageClassInfo stageClassInfo in list)
{
    using (System.IO.StreamWriter sw = System.IO.File.AppendText(Application.dataPath + "/BaseMods/innerStageLog.txt"))
    {
        sw.WriteLine(string.Format("{0}-{1}/{2}", stageClassInfo.chapter, stageClassInfo.id, stageClassInfo.storyType));
    }
}
foreach (StoryLineData stageClassInfo in lineList)
{
    using (System.IO.StreamWriter sw = System.IO.File.AppendText(Application.dataPath + "/BaseMods/innerStageLog.txt"))
    {
        sw.WriteLine($"{stageClassInfo.currentstory} / {stageClassInfo.stageList.Count}");
    }
}

try
{
    StoryLineData storyLineData = new StoryLineData(10000);
    storyLineData.stageList = new List<StageClassInfo>();
    foreach (StageClassInfo stageClassInfo in Singleton<StageClassInfoList>.Instance.recipeCondList)
    {
        if (stageClassInfo.storyType == "TestStage")
            storyLineData.stageList.Add(stageClassInfo);
    }

    List<StoryLineData> lineList = (List<StoryLineData>)__instance.GetType().GetField("lineList", BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic).GetValue(__instance);
    lineList.Add(storyLineData);
}
catch (Exception ex)
{
    using (System.IO.StreamWriter sw = System.IO.File.AppendText(UnityEngine.Application.dataPath + "/BaseMods/errorLog_Mod.txt"))
    {
        sw.WriteLine(ex + ex.StackTrace);
    }
}